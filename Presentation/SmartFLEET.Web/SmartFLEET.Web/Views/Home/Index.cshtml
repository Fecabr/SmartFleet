@using RHManagementSystem.HtmlExtenssions
@using SmartFleet.Core.Domain.Vehicles
<style>
    .jbox-t {
        margin-top: -23px !important;
        margin-left: -10px !important;
    }
    /*.ui-layout-pane, .ui-layout-resizer {
        top: 60px !important
    }*/
</style>
<link href="~/dist/plugins/select2/select2.bootstrap.css" rel="stylesheet" />
<link href="~/dist/plugins/select2/select2.min.css" rel="stylesheet" />


<div id="Modal-2" ui-view class="ui-layout-center"  style="top: 60px !important; height: 100%;width: 100%">
    <div id="map" style="height: 100%;width: 100%"></div>
   
    </div>
<div class="ui-layout-west" style="top: 60px !important;width: 350px" >
    
    <div id="accordion" class="panel-group">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion"  href="#poition"> <i class="la la-map-marker "></i> Position actuelle </a>
                </h4>
            </div>
            <div id="poition" class="panel-collapse collapse in">
                <div class="panel-body">
                    <div class="panel-body" style="height: 70%;overflow: auto;">
                        <div class="input-group" style="margin-top: -10px">
                            <input type="text" class="form-control" placeholder="Search node .." id="search">
                            <span class="input-group-btn">
                                <button class="btn btn-default" type="button" id="btn-search">Go!</button>
                            </span>
                        </div>
                        <nav id="left-panel" style="margin-top: 10px" role="navigation">
                            
                            <div id="container">

                            </div>
                        </nav>
    
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-default"  >
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapse2"><i class="la la-map "></i> Historique de trajets </a>
                </h4>
            </div>
            <div id="collapse2" class="panel-collapse collapse" ng-controller ="positionController">
                <div class="panel-body">
                    @{
                        Html.RenderPartial("_PositionForm");
                    }
                </div>
            </div>
        </div>
        <div class="panel panel-default" ng-controller="reportController" >
            <div class="panel-heading">
                <h4 class="panel-title">
                    <a data-toggle="collapse" data-parent="#accordion" href="#collapseTwo"><i class="la la-pie-chart "></i> Rapport par date </a>
                </h4>
            </div>
            <div id="collapseTwo" class="panel-collapse collapse ">
                <div class="panel-body">
                    @{
                        Html.RenderPartial("_ReportForm");
                    }
                </div>
            </div>
        </div>
        
    </div>
    <div style="display: none" id="posi-search">
        @{
            Html.RenderPartial("_PositionByPeriodFrm");
        }
    </div> 
    <div style="display: none" id="driver-frm">
        @{
            Html.RenderPartial("_CreateDriver");
        }
    </div> 
    
     
  
   
</div>
@section scripts
{
    <script src="~/signalr/hubs"></script>

    <script src="~/Scripts/app/report/reportService.js"></script>
    <script src="~/Scripts/app/report/reportController.js"></script>
    <script src="~/Scripts/app/position/positionService.js"></script>
    <script src="~/Scripts/app/position/positionController.js"></script>

    <script>
        var markerGroup;
        var map;
        var markers = [];
        var layout;
        $(document).ready(function() {
            initJstree();
            initMap();
            $("#vehicles").select2({
                // width: 175
            
            });
            $("#vehicles-pos").select2();
            $("#daily-report").tabs();

            //   initSignalR();
            $("#startPeriod").datepicker({
                format: 'yyyy-mm-dd',
                orientation: 'top',
                language: 'fr',
                autoclose: true
            });
            $("#startPeriod-pos").datepicker({
                format: 'yyyy-mm-dd',
                orientation: 'top',
                language: 'fr',
                autoclose: true
            });
            $("#endPeriod").datepicker({
                format: 'yyyy-mm-dd',
                orientation: 'bottom',
                language: 'fr',
                autoclose: true
            });
            $("#dt-driver").datepicker({
                format: 'yyyy-mm-dd',
                orientation: 'top',
                language: 'fr',
                autoclose: true
            });
            $(".nav a").on("click",
                function() {
                    $(".nav").find(".active").removeClass("active");
                    $(this).parent().addClass("active");

                });

        });


        function initMap() {
            map = L.map('map').setView([36.7525000, 3.0419700], 8);
            markerGroup = L.layerGroup().addTo(map);

            layout = L;
            var thisIcon = new L.Icon();
            $.ajax({
                url: '@Url.Action("AllVehiclesWithLastPosition")',
                success: function(result) {
                    for (var i = 0; i < result.length; i++) {
                        var item = result[i];
                        var icon = new L.Icon();
                        var template = "<div><h4><b> <b>Véhicule</b>: " +
                            item.VehicleName +
                            "</b></h4> <b>Adresse</b>: " +
                            item.Address +
                            "" +
                            "<p> <b>Vitesse</b>: " +
                            item.Speed +
                            "Km/H</p>" +
                            "</h5>" +
                            "<p> <b>Latitude</b>: " +
                            item.Latitude +
                            "</p>" +
                            "</h5>" +
                            "<p> <b>Longitude</b>:  " +
                            item.Longitude +
                            "</p>" +
                            "</div>";

                        icon.options.iconUrl = item.ImageUri;
                        var label = "<h5><b>" + item.VehicleName + "</b></h5>"
                        var marker = L.marker([item.Latitude, item.Longitude], { title: item.VehicleId, icon: icon })
                            .bindPopup(template,
                                {
                                    permanent: true,
                                    direction: 'topleft'
                                }).bindTooltip(label,
                                {
                                    permanent: true,
                                    direction: 'top'
                                }
                            ).addTo(map).on('click', clickZoom);
                        markers.push(marker);
                    }

                }
            });
            loadData(0.67);
            // load a tile layer
            var OpenStreetMap_Mapnik = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
                {
                    maxZoom: 19,
                    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
                });
            map.addLayer(OpenStreetMap_Mapnik);

            var hub = $.connection.signalRHandler;
            hub.client.receiveGpsStatements = function(gpsStatement) {
                console.log(gpsStatement);
                removeMarker(gpsStatement);
                thisIcon.options.iconUrl = gpsStatement.ImageUri;
                //for (var i = 0; i < markers.length; i++) {
                //    map.removeLayer(markers[i]);
                //}
                var template = "<div><h4><b>" +
                    gpsStatement.VehicleName +
                    "</b></h4><h5>" +
                    gpsStatement.Address +
                    "</h5>" +
                    "<p>" +
                    gpsStatement.Speed +
                    "Km/H</p>" +
                    "</h5>" +
                    "<p>" +
                    gpsStatement.Latitude +
                    "Km/H</p>" +
                    "</h5>" +
                    "<p>" +
                    gpsStatement.Longitude +
                    "Km/H</p>" +
                    "</div>";
                var label = "<h5><b>" + gpsStatement.VehicleName + "</b></h5>";
                var marker = L.marker([gpsStatement.Latitude, gpsStatement.Longitude],
                        { title: gpsStatement.VehicleId, icon: thisIcon })
                    .bindPopup(template,
                        {
                            permanent: true,
                            direction: 'topleft'
                        }).bindTooltip(label,
                        {
                            permanent: true,
                            direction: 'top'
                        }
                    ).addTo(map);
                markers.push(marker);
            }
            $.connection.hub.start().done(function() {
                hub.server.join("@ViewBag.GroupName");
                loadData(1);
            });
            //return loadPolygan;
        }

        function clickZoom(e) {
            map.setView(e.target.getLatLng(), 15);
        }

        function iniJBOXPositionSearch() {
          
                return new jBox('Modal',
                {
                     content : $("#posi-search"),
                     width: 300,
                     height: 150,
                     overlay: false,
                     position: { x: 'left', y: 'top' },
                     offset: { x: 330, y: 65 },
                });

        }
        function iniJBOXDriver() {
          
            return new jBox('Modal',
                {
                    content: $("#driver-frm"),
                    width: 470,
                    height: $('#map').height(),
                    overlay: false,
                    position: { x: 'left', y: 'top' },
                    offset: { x: 330, y: 65 },
                });

        }

        function iniJBOX() {
            var width = $('#map').width();
            var content = '<div class="row" id="tachy-dashboard" style="margin-left: 10px; margin-bottom: 25px">' +
                '<h6 id="vehicle-name" class="col-md-4"></h6>' +
                '<h6 id="date-pos" class="col-md-2"></h6>' +
                '<h6 id="begin-ser" class="col-md-2"></h6>' +
                '<h6 id="end-ser" class="col-md-2"></h6>' +
                '<div class="col-md-12" id="gps-activity" style="width: 99%"><div id="wait"></div> </div></div>';
            return new jBox('Modal',
                {
                    content: content,
                    id: 'jBox1',
                    width: width,
                    height: 160,
                    position: { x: 'right', y: 'bottom' },
                    offset: { x: -15, y: -30 },
                    overlay: false,
                    onClose: function() {
                        positionModalOpend = false;
                        removeLineMarckers();
                    },
                    addClass: '.jbox-t',
                    // closeOnClick: 'box',
                    onCloseComplete: function() {
                        this.destroy();
                    }
                });


        }

        var reportModalOpend = false;

        function initReportBox() {
            var width = $('#map').width();
            var height = $('#map').height();
            return new jBox('Modal',
                {
                    content: $("#daily-report"),
                    id: 'jBox2',
                    //  title:'Rapport',
                    width: width,
                    height: height,
                    position: { x: 'right', y: 'bottom' },
                    offset: { x: -15, y: -30 },
                    overlay: false,
                    onClose: function() {
                        reportModalOpend = false;

                    },
                    addClass: '.jbox-t',
                    // closeOnClick: 'box',
                    onCloseComplete: function() {
                        //  this.destroy();
                    }
                });
        }

        var currentVehicleId;
        var positionModalOpend = false;

        function initJstree() {
            loadData(0.33);
            $('#container').jstree({
                "core": {
                    "data": { "url": "/Home/LoadNodes" }
                },
                "search": {
                    "case_insensitive": true,
                    "show_only_matches": true
                },
                'contextmenu': {
                    'items': customMenu
                },

                "plugins": ['theme', "html_data", "search", "contextmenu"]
            });
            $(document).on('click',
                '.jstree-anchor',
                function(e) {
                    var anchorId = $(this).parent().attr('id');
                    currentVehicleId = anchorId;
                    //         var currantNav = $(".nav").find(".active");
                    //         // $("#period-form").toggle();
                    ////         if ($(currantNav).attr('id') == "report") return;


                    if (anchorId != '00000000-0000-0000-0000-000000000000') {
                        markerFunction(anchorId);

                        if (!positionModalOpend) {
                            iniJBOX().open();
                            positionModalOpend = true;
                        }
                        initWait();

                        $.ajax({
                            url: '@Url.Action("GetTargetByPeriod")/?vehicleId=' + anchorId,
                            success: function(result) {
                                console.log(result);
                                $("#gps-activity").html("");
                                $("#vehicle").html("");
                                $("#date").html("");
                                if (result.length == 0) {
                                    $('#jBox1').waitMe("hide");

                                    return;

                                }
                                $("#vehicle-name").html("Véhicule: " + result.Periods[0].VehicleName);
                                $("#date-pos").html("Date: " + result.Periods[0].CurrentDate);
                                initGpsData(result.Periods, result.GpsCollection, "gps-activity");
                                $('#jBox1').waitMe("hide");
                            }
                        });
                    } //
                });
        }

        function initWait() {
            $('#jBox1').waitMe({
                effect: 'bounce',
                text: 'Téléchargement en cours ...',
                color: '#000',
                maxSize: '',
                waitTime: -1,
                textPos: 'vertical',
                fontSize: '',
                source: '',
                onClose: function() {}
            });
        }

        function customMenu(context) {
            var items = {
                aclRole: {
                    label: "Ajouter un conducteur",
                    action: function (obj) {
                        console.log(obj);
                        iniJBOXDriver().open();
                        //window.location.href = '<?= Url::to(['role/acl']) ?>' + '?name=' + node.li_attr.name
                    },
                    icon: "fa fa-user"
                },
                deleteRole: {
                    label: "Position par période",
                    action: function (obj) {
                        console.log(obj);
                        iniJBOXPositionSearch().open();
                    },
                    icon: "fa fa-map-marker"
                }
            }
            return items;
        }

        function markerFunction(id) {
            for (var i in markers) {
                var markerID = markers[i].options.title;
                var position = markers[i].getLatLng();
                if (markerID == id) {
                    map.setView(position, 15);
                    markers[i].openPopup();
                };
            }
        }

        function removeLineMarckers() {
            if (lastLine != null && lastLine != undefined)
                map.removeLayer(lastLine);
            if (lastarrowHead != null && lastarrowHead != undefined)
                map.removeLayer(lastarrowHead);
        }

        function removeMarker(gpsStatement) {
            //console.log(markers);
            for (var i = 0; i < markers.length; i++) {
                var marker = markers[i];
                var markerID = marker.options.title;
                // console.log(markerID, gpsStatement.VehicleId);
                if (_guidsAreEqual("" + markerID + "", "" + gpsStatement.VehicleId + "") == 0) {
                    map.removeLayer(markers[i]);
                    //markers.splice(i, 1);
                }
            }

        }

        function _guidsAreEqual(left, right) {

            return left.localeCompare(right);
        };

        function loadData(percent) {
            $('body').loadie(percent);
        }

        var GpsData = [];

        function initGpsData(periods, gpsCollection, divName) {
            // CleanTracePeriod();
            GpsData = gpsCollection;
            console.log(periods);
            var container = document.getElementById(divName);
            var data = [];
            var end;
            if (periods.length === 0) return;
            if (periods[periods.length - 1] != undefined)
                end = periods[periods.length - 1].EndPeriod;
            var start = periods[0].StartPeriod;
            console.log(periods[0].StartPeriod);
            $.each(periods,
                function(i, v) {
                    var activity = "";
                    var style = "";
                    // console.log(v.Activity);
                    switch (v.MotionStatus) {
                    case "Stopped":
                        {
                            activity = "Arrêt";
                            style =
                                "background-color:#DC143C;height:9px; border-radius:0;margin-top: 20px;border-color:transparent!important;border-width:0!important;";

                        }
                        break;
                    case "Moving":
                        {
                            activity = "Conduite";
                            style =
                                "background-color:#048b9a;height:40px;border-color:transparent!important; border-radius:0;margin-top: 20px;border-width:0!important;";
                        }
                        break;
                    default:
                        {
                            activity = "Ralenti";
                            style =
                                "background-color:#dab30a;height:30px;border-color:transparent!important; border-radius:0;margin-top: 20px;border-width:0!important;";
                        }
                        break;
                    }
                    var startTime = v.StartPeriod.split('T')[1].split(':')[0] +
                        ':' +
                        v.StartPeriod.split('T')[1].split(':')[1];
                    var endTime = v.EndPeriod.split('T')[1].split(':')[0] +
                        ':' +
                        v.EndPeriod.split('T')[1].split(':')[1];
                    var duration = "";
                    if (v.Duration !== "")
                        duration = secondsToHms(v.Duration);
                    var template = '' + activity + ' de ' + startTime + ' à ' + endTime;
                    if (duration !== "") {
                        template = template + ' (Durée : ' + duration + ')';
                    }
                    // console.log(v.DurationInSeconds);
                    template = template + '\r';
                    if (v.MotionStatus !== 'Stopped') {
                        template = template + "Départ : " + v.StartAddres + '\r';

                        template = template + "Arrivée : " + v.ArrivalAddres + '\r';

                        template = template + "Vitesse moyenne : " + v.AvgSpeed + ' km/h\r';
                    } else if (v.MotionStatus === 'Stopped' && v.StartAddres != null) {
                        template = template + "Lieu : " + v.StartAddres + '\r';

                    } else {
                        template = template + "Lieu : " + v.ArrivalAddres + '\r';

                    }
                    if (v.MotionStatus !== 'Stopped') template = template + "Distance : " + v.Distance + " km." + '\r';

                    data.push({
                        id: i,
                        group: null,
                        content: v.MovementState,
                        style: style,
                        start: v.StartPeriod,
                        end: v.EndPeriod,
                        title: template
                    });

                });
            var result = new vis.DataSet(data);
            //  console.log(end);
            InitTimelineChart(container, result, start, end, 93);
        }

        function secondsToHms(seconds) {
            var d = Number(seconds);
            var h = Math.floor(d / 3600);
            var m = Math.floor(d % 3600 / 60);
            var s = Math.floor(d % 3600 % 60);

            var hDisplay = h > 0 ? h + (h == 1 ? " heure, " : " heures, ") : "";
            var mDisplay = m > 0 ? m + (m == 1 ? " minute " : " minutes ") : "";
            //  var sDisplay = s > 0 ? s + (s == 1 ? " second" : " seconds") : "";
            if (hDisplay !== "" || mDisplay !== "")
                return hDisplay + mDisplay;
            return "moins d'1 min";

        }

        var timeLineData;

        function InitTimelineChart(container, data, start, end, height) {
            var today = new Date();
            timeLineData = data;
            console.log(end);
            today.setHours(24, 0, 0, 0);
            var max;
            max = end;
            //console.log(today);
            var options = {
                width: '100%',
                locale: 'fr',
                height: height,
                editable: false,
                margin: {
                    item: 10
                },
                selectable: true,
                start: start,
                zoomable: true,
                //maxZoom: 20,
                min: start,
                max: max,
                end: end,
                showCurrentTime: false,
                template: function(item) {
                    var template = item.content;
                    return "";
                },
                stack: false,
                format: {
                    minorLabels: {
                        minute: 'HH:mm',
                        hour: 'HH'

                    }
                }

            }

            // Create a Timeline
            var timeline = new vis.Timeline(container, null, options);
            timeline.setItems(data);
            timeline.on("click",
                function(properties) {
                    onPeriodClick("click", properties);
                });


        }

        var currentBarId;
        var PinStopMarkers = [];
        var targetMode = false;
        var lastSelectedBar;
        var lastLine;
        var lastarrowHead;

        function onPeriodClick(event, properties) {
            if (properties.what != "item") return;
            var item = properties.item;
            var bar = $(properties.event.target);
            if (lastSelectedBar != null)
                lastSelectedBar.css("border", "color:transparent!important");
            lastSelectedBar = bar;
            bar.parent().css("border", "solid 2px #ff8000");
            var start = new Date(timeLineData.get(item).start);
            var end = new Date(timeLineData.get(item).end);
            var listOfGpsPoints = [];

            var s = -1;
            var e = -1;
            if (GpsData == null) return;
            for (var i = 0; i < GpsData.length; i++) {
                if (new Date(GpsData[i].GpsStatement).getTime() - start.getTime() >= 0 && s == -1) {
                    s = i;
                }
                if (new Date(GpsData[i].GpsStatement).getTime() - end.getTime() > 0) {
                    e = i - 1;
                    break;
                }
            }

            if (e === -1 && s > -1) e = GpsData.length - 1;
            else if (s === -1 && e > -1) s = e;

            // console.log(s + " " + e);
            for (var j = s; j <= e; j++) {
                if (GpsData[j] != undefined)
                    listOfGpsPoints.push(GpsData[j]);
            }
            if (listOfGpsPoints.length > 0) {

                var polygonArray = "[";
                for (var k = 0; k < listOfGpsPoints.length; k++) {
                    var array = [];
                    var gps = listOfGpsPoints[k];
                    array.push(gps.Latitude, gps.Longitude);
                    if (k < listOfGpsPoints.length - 1)
                        polygonArray = polygonArray + "[" + gps.Latitude + " , " + gps.Longitude + "]" + ",";
                    else polygonArray = polygonArray + "[" + gps.Latitude + " , " + gps.Longitude + "]";

                }
                polygonArray = polygonArray + "]";
                var arrow = L.polyline(JSON.parse(polygonArray), { color: 'blue' }).addTo(map);
                if (lastLine != null)
                    map.removeLayer(lastLine);
                lastLine = arrow;
                if (lastarrowHead != null)
                    map.removeLayer(lastarrowHead);
                var arrowHead = L.polylineDecorator(arrow,
                    {
                        patterns: [
                            {
                                offset: 25,
                                repeat: 50,
                                symbol: L.Symbol.arrowHead(
                                    { pixelSize: 15, pathOptions: { fillOpacity: 1, weight: 0 } })
                            }
                        ]
                    }).addTo(map);
                map.fitBounds(JSON.parse(polygonArray));
                lastarrowHead = arrowHead;
            }

            //data.get(properties.time);
        }

        function parseDate(input) {
            var parts = input.match(/(\d+)/g);
            // new Date(year, month [, date [, hours[, minutes[, seconds[, ms]]]]])
            return new Date(parts[0], parts[1] - 1, parts[2]); // months are 0-based
        }
    </script>
}
